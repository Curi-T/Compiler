package cn.cqut.auto.JFlex.back;
/* The following code was generated by JFlex 1.6.1 */
/* The following code was generated by JFlex 1.6.1 */


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>C:/Users/黄程/Desktop/编译原理/jflex文件/词法分析/test.flex</tt>
 */
public class Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int STRING = 2;
    public static final int COMMENT_MULTI_LINE = 4;
    public static final int COMMENT_ONE_LINE = 6;
    public static final int HEXNUM = 8;
    public static final int OCTNUM = 10;
    public static final int FLOATINDEXNUM = 12;
    public static final int FLOATDECNUM = 14;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\1\7\1\64\2\0\1\63\22\0\1\62\1\46\1\32\2\0" +
                    "\1\47\1\55\1\4\1\42\1\43\1\41\1\50\1\5\1\51\1\36" +
                    "\1\40\1\33\7\34\2\3\1\0\1\61\1\52\1\53\1\54\2\0" +
                    "\4\35\1\37\22\35\1\1\2\35\1\44\1\6\1\45\1\0\1\2" +
                    "\1\0\1\12\1\22\1\10\1\30\1\23\1\17\1\35\1\11\1\14" +
                    "\1\35\1\24\1\20\1\35\1\15\1\21\2\35\1\13\1\25\1\16" +
                    "\1\26\1\27\1\31\1\1\2\35\1\57\1\56\1\60\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\10\0\1\1\1\2\1\3\1\1\1\4\1\5\11\2" +
                    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15" +
                    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25" +
                    "\2\1\1\26\1\27\1\30\1\31\1\32\1\33\1\5" +
                    "\1\1\1\5\2\34\1\35\1\36\1\37\1\40\1\37" +
                    "\1\41\1\40\1\42\1\43\1\44\2\0\4\2\1\45" +
                    "\5\2\1\46\1\2\1\47\1\50\1\51\1\52\1\53" +
                    "\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63" +
                    "\1\64\1\65\1\66\1\67\1\70\1\41\1\71\3\2" +
                    "\1\72\1\2\1\73\4\2\1\74\1\40\1\0\1\75" +
                    "\5\2\1\76\1\77\1\2\1\40\1\2\1\100\1\2" +
                    "\1\101\1\102\1\103\1\2\1\104\1\2\1\105";

    private static int[] zzUnpackAction() {
        int[] result = new int[129];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173" +
                    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u01a8\0\u027c\0\u02b1\0\u02e6" +
                    "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u01a8" +
                    "\0\u048e\0\u01a8\0\u04c3\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8" +
                    "\0\u04f8\0\u01a8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636" +
                    "\0\u066b\0\u01a8\0\u01a8\0\u01a8\0\u06a0\0\u06d5\0\u01a8\0\u070a" +
                    "\0\u073f\0\u0774\0\u01a8\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d" +
                    "\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u01a8\0\u01a8\0\u0986\0\u09bb" +
                    "\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u01dd\0\u0ac4\0\u0af9\0\u0b2e" +
                    "\0\u0b63\0\u0b98\0\u01dd\0\u0bcd\0\u01a8\0\u0c02\0\u0c37\0\u0c6c" +
                    "\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8" +
                    "\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u01a8\0\u0ca1\0\u01a8" +
                    "\0\u0cd6\0\u0d0b\0\u0d40\0\u01dd\0\u0d75\0\u01dd\0\u0daa\0\u0ddf" +
                    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u01dd\0\u0f1d\0\u0f52" +
                    "\0\u0f87\0\u0fbc\0\u0ff1\0\u01dd\0\u01dd\0\u1026\0\u0ee8\0\u105b" +
                    "\0\u01dd\0\u1090\0\u01dd\0\u01dd\0\u01dd\0\u10c5\0\u01dd\0\u10fa" +
                    "\0\u01dd";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[129];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\11\2\12\1\13\1\14\1\15\1\11\1\16\1\17" +
                    "\2\12\1\20\1\21\2\12\1\22\2\12\1\23\1\24" +
                    "\3\12\1\25\1\26\1\27\1\30\1\31\1\13\1\12" +
                    "\1\32\1\12\1\33\1\34\1\35\1\36\1\37\1\40" +
                    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50" +
                    "\1\51\1\52\1\53\1\54\3\16\6\55\1\56\23\55" +
                    "\1\57\30\55\2\11\40\60\1\11\1\61\23\60\63\62" +
                    "\1\63\1\64\1\65\1\66\1\65\1\66\4\65\22\66" +
                    "\1\65\3\66\1\65\1\66\25\65\65\11\3\67\1\70" +
                    "\30\67\1\70\13\67\2\71\13\67\3\72\1\73\27\72" +
                    "\2\73\30\72\66\0\3\12\4\0\22\12\1\0\3\12" +
                    "\1\0\1\12\26\0\1\74\1\0\1\13\4\0\13\74" +
                    "\1\75\6\74\1\0\2\13\1\74\1\76\1\75\26\0" +
                    "\1\77\1\0\1\77\1\0\1\77\1\100\1\0\22\77" +
                    "\1\0\27\77\12\0\1\16\52\0\3\16\1\0\3\12" +
                    "\4\0\1\12\1\101\7\12\1\102\10\12\1\0\3\12" +
                    "\1\0\1\12\26\0\3\12\4\0\13\12\1\103\6\12" +
                    "\1\0\3\12\1\0\1\12\26\0\3\12\4\0\5\12" +
                    "\1\104\1\12\1\105\12\12\1\0\3\12\1\0\1\12" +
                    "\26\0\3\12\4\0\10\12\1\106\1\107\10\12\1\0" +
                    "\3\12\1\0\1\12\26\0\3\12\4\0\3\12\1\110" +
                    "\16\12\1\0\3\12\1\0\1\12\26\0\3\12\4\0" +
                    "\10\12\1\111\11\12\1\0\3\12\1\0\1\12\26\0" +
                    "\3\12\4\0\11\12\1\112\10\12\1\0\3\12\1\0" +
                    "\1\12\26\0\3\12\4\0\11\12\1\113\10\12\1\0" +
                    "\3\12\1\0\1\12\26\0\3\12\4\0\1\12\1\114" +
                    "\20\12\1\0\3\12\1\0\1\12\26\0\1\115\1\0" +
                    "\1\116\4\0\22\116\1\0\1\117\1\120\1\116\1\76" +
                    "\1\116\65\0\1\121\1\122\76\0\1\123\64\0\1\124" +
                    "\64\0\1\125\64\0\1\126\64\0\1\127\64\0\1\130" +
                    "\66\0\1\131\65\0\1\132\6\0\6\55\1\0\23\55" +
                    "\1\0\30\55\15\0\1\133\1\0\1\134\1\135\13\0" +
                    "\1\136\32\0\40\60\2\0\23\60\40\0\1\63\24\0" +
                    "\63\62\65\0\1\63\2\0\1\65\1\0\1\65\4\0" +
                    "\22\65\1\0\5\65\26\0\1\66\1\0\1\66\4\0" +
                    "\22\66\1\0\3\66\1\65\1\66\26\0\1\67\1\0" +
                    "\1\67\4\0\22\67\1\0\5\67\26\0\1\67\1\0" +
                    "\1\70\4\0\22\67\1\0\2\70\3\67\26\0\1\67" +
                    "\1\0\1\70\4\0\22\67\1\0\1\67\1\70\3\67" +
                    "\26\0\1\72\1\0\1\72\4\0\22\72\1\0\5\72" +
                    "\26\0\1\72\1\0\1\73\4\0\13\72\1\137\6\72" +
                    "\1\0\2\73\2\72\1\137\26\0\1\74\1\0\1\74" +
                    "\4\0\22\74\1\0\3\74\1\0\1\74\31\0\1\140" +
                    "\66\0\2\77\22\0\1\77\30\0\2\77\1\0\3\12" +
                    "\4\0\2\12\1\141\17\12\1\0\3\12\1\0\1\12" +
                    "\26\0\3\12\4\0\5\12\1\142\14\12\1\0\3\12" +
                    "\1\0\1\12\26\0\3\12\4\0\6\12\1\143\13\12" +
                    "\1\0\3\12\1\0\1\12\26\0\3\12\4\0\6\12" +
                    "\1\144\13\12\1\0\3\12\1\0\1\12\26\0\3\12" +
                    "\4\0\11\12\1\145\10\12\1\0\3\12\1\0\1\12" +
                    "\26\0\3\12\4\0\3\12\1\146\16\12\1\0\3\12" +
                    "\1\0\1\12\26\0\3\12\4\0\13\12\1\147\6\12" +
                    "\1\0\3\12\1\0\1\12\26\0\3\12\4\0\15\12" +
                    "\1\150\4\12\1\0\3\12\1\0\1\12\26\0\3\12" +
                    "\4\0\4\12\1\151\15\12\1\0\3\12\1\0\1\12" +
                    "\26\0\3\12\4\0\4\12\1\152\15\12\1\0\3\12" +
                    "\1\0\1\12\26\0\1\116\1\0\1\116\4\0\22\116" +
                    "\1\0\3\116\1\0\1\116\26\0\1\117\1\0\1\117" +
                    "\4\0\22\117\1\0\5\117\30\0\1\153\4\0\22\153" +
                    "\1\0\2\120\1\153\1\0\1\153\26\0\1\72\1\0" +
                    "\1\154\4\0\22\72\1\0\1\72\1\154\3\72\10\0" +
                    "\2\155\14\0\3\12\4\0\3\12\1\156\16\12\1\0" +
                    "\3\12\1\0\1\12\26\0\3\12\4\0\6\12\1\157" +
                    "\6\12\1\160\4\12\1\0\3\12\1\0\1\12\26\0" +
                    "\3\12\4\0\16\12\1\161\3\12\1\0\3\12\1\0" +
                    "\1\12\26\0\3\12\4\0\2\12\1\162\17\12\1\0" +
                    "\3\12\1\0\1\12\26\0\3\12\4\0\2\12\1\163" +
                    "\17\12\1\0\3\12\1\0\1\12\26\0\3\12\4\0" +
                    "\13\12\1\164\6\12\1\0\3\12\1\0\1\12\26\0" +
                    "\3\12\4\0\20\12\1\165\1\12\1\0\3\12\1\0" +
                    "\1\12\26\0\3\12\4\0\10\12\1\166\11\12\1\0" +
                    "\3\12\1\0\1\12\26\0\1\153\1\0\1\153\4\0" +
                    "\22\153\1\0\3\153\1\0\1\153\26\0\1\72\1\0" +
                    "\1\154\4\0\22\72\1\0\1\72\1\154\3\72\30\0" +
                    "\1\167\30\0\1\167\31\0\3\12\4\0\4\12\1\170" +
                    "\15\12\1\0\3\12\1\0\1\12\26\0\3\12\4\0" +
                    "\6\12\1\171\13\12\1\0\3\12\1\0\1\12\26\0" +
                    "\3\12\4\0\3\12\1\172\16\12\1\0\3\12\1\0" +
                    "\1\12\26\0\3\12\4\0\6\12\1\173\13\12\1\0" +
                    "\3\12\1\0\1\12\26\0\3\12\4\0\14\12\1\174" +
                    "\5\12\1\0\3\12\1\0\1\12\26\0\3\12\4\0" +
                    "\13\12\1\175\6\12\1\0\3\12\1\0\1\12\26\0" +
                    "\3\12\4\0\5\12\1\176\14\12\1\0\3\12\1\0" +
                    "\1\12\26\0\3\12\4\0\5\12\1\177\14\12\1\0" +
                    "\3\12\1\0\1\12\26\0\3\12\4\0\16\12\1\200" +
                    "\3\12\1\0\3\12\1\0\1\12\26\0\3\12\4\0" +
                    "\13\12\1\201\6\12\1\0\3\12\1\0\1\12\25\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[4399];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\10\0\1\11\3\1\1\11\12\1\1\11\1\1\1\11" +
                    "\1\1\5\11\1\1\1\11\7\1\3\11\2\1\1\11" +
                    "\3\1\1\11\11\1\2\11\2\0\14\1\1\11\3\1" +
                    "\16\11\1\1\1\11\14\1\1\0\24\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[129];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

    /* user code: */
    StringBuffer string = new StringBuffer();
    boolean flag = true;//zuo wei zheng fu hao jie shou
    Symbol symbol = new Symbol();
    String s = "";

    private Token symbol(int type) {
        return symbol.symbol(type, yyline, yycolumn);
    }

    private Token symbol(int type, Object value) {
        return symbol.symbol(type, yyline, yycolumn, value);
    }


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public Lexer(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 170) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

        /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

        /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
            /* potentially more input available */
            return false;
        }

        /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public Token yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return null;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        yybegin(YYINITIAL);
                        System.out.println("can't identifier");
                        return symbol(sym.ERROR, "can't identifier " + yytext());
                    }
                    case 70:
                        break;
                    case 2: {
                        return symbol(sym.IDENTIFIER, yytext());
                    }
                    case 71:
                        break;
                    case 3: {
                        return symbol(sym.INTEGERVAL, s + yytext());
                    }
                    case 72:
                        break;
                    case 4: {
                        return symbol(304);
                    }
                    case 73:
                        break;
                    case 5: {
                    }
                    case 74:
                        break;
                    case 6: {
                        string.setLength(0);
                        yybegin(STRING);
                    }
                    case 75:
                        break;
                    case 7: {
                        return symbol(sym.INTEGERVAL, s + "0");
                    }
                    case 76:
                        break;
                    case 8: {
                        return symbol(220);
                    }
                    case 77:
                        break;
                    case 9: {
                        return symbol(207);
                    }
                    case 78:
                        break;
                    case 10: {
                        return symbol(206);
                    }
                    case 79:
                        break;
                    case 11: {
                        return symbol(201);
                    }
                    case 80:
                        break;
                    case 12: {
                        return symbol(202);
                    }
                    case 81:
                        break;
                    case 13: {
                        return symbol(203);
                    }
                    case 82:
                        break;
                    case 14: {
                        return symbol(204);
                    }
                    case 83:
                        break;
                    case 15: {
                        return symbol(205);
                    }
                    case 84:
                        break;
                    case 16: {
                        return symbol(208);
                    }
                    case 85:
                        break;
                    case 17: {
                        return symbol(209);
                    }
                    case 86:
                        break;
                    case 18: {
                        return symbol(210);
                    }
                    case 87:
                        break;
                    case 19: {
                        return symbol(211);
                    }
                    case 88:
                        break;
                    case 20: {
                        return symbol(219);
                    }
                    case 89:
                        break;
                    case 21: {
                        return symbol(213);
                    }
                    case 90:
                        break;
                    case 22: {
                        return symbol(301);
                    }
                    case 91:
                        break;
                    case 23: {
                        return symbol(302);
                    }
                    case 92:
                        break;
                    case 24: {
                        return symbol(303);
                    }
                    case 93:
                        break;
                    case 25: {
                        string.append(yytext());
                    }
                    case 94:
                        break;
                    case 26: {
                        string.append('\\');
                    }
                    case 95:
                        break;
                    case 27: {
                        yybegin(YYINITIAL);
                        return symbol(sym.STRING,
                                string.toString());
                    }
                    case 96:
                        break;
                    case 28: {
                        yybegin(YYINITIAL);
                    }
                    case 97:
                        break;
                    case 29: {
                        yybegin(YYINITIAL);
                        System.out.println("error hexnum");
                        return symbol(sym.ERROR, "error hexnum 0x" + yytext());
                    }
                    case 98:
                        break;
                    case 30: {
                        yybegin(YYINITIAL);
                        return symbol(sym.HEXINTEGERVAL, string.toString() + yytext());
                    }
                    case 99:
                        break;
                    case 31: {
                        yybegin(YYINITIAL);
                        System.out.println("error index part");
                        return symbol(sym.ERROR, "error index part " + string.toString() + yytext());
                    }
                    case 100:
                        break;
                    case 32: {
                        yybegin(YYINITIAL);
                        return symbol(sym.FLOATVAL, string.toString() + yytext());
                    }
                    case 101:
                        break;
                    case 33: {
                        yybegin(YYINITIAL);
                        System.out.println("error dec part");
                        return symbol(sym.ERROR, "error dec part " + string.toString() + yytext());
                    }
                    case 102:
                        break;
                    case 34: {
                        System.out.println("error num");
                        return symbol(sym.ERROR, "error num " + s + yytext());
                    }
                    case 103:
                        break;
                    case 35: {
                        yybegin(FLOATINDEXNUM);
                        string.setLength(0);
                        string.append(s + yytext());
                    }
                    case 104:
                        break;
                    case 36: {
                        yybegin(FLOATDECNUM);
                        string.setLength(0);
                        string.append(s + yytext());
                    }
                    case 105:
                        break;
                    case 37: {
                        return symbol(sym.IF);
                    }
                    case 106:
                        break;
                    case 38: {
                        return symbol(sym.DO);
                    }
                    case 107:
                        break;
                    case 39: {
                        yybegin(HEXNUM);
                        string.setLength(0);
                        string.append(s + yytext());
                    }
                    case 108:
                        break;
                    case 40: {
                        System.out.println("error num");
                        return symbol(sym.ERROR, "error oct num " + s + yytext());
                    }
                    case 109:
                        break;
                    case 41: {
                        System.out.println("zero too much error");
                        return symbol(sym.ERROR, "zero too much error " + s + yytext());
                    }
                    case 110:
                        break;
                    case 42: {
                        return symbol(sym.OCTINTEGERVAL, s + yytext());
                    }
                    case 111:
                        break;
                    case 43: {
                        yybegin(COMMENT_ONE_LINE);
                    }
                    case 112:
                        break;
                    case 44: {
                        yybegin(COMMENT_MULTI_LINE);
                    }
                    case 113:
                        break;
                    case 45: {
                        return symbol(216);
                    }
                    case 114:
                        break;
                    case 46: {
                        return symbol(222);
                    }
                    case 115:
                        break;
                    case 47: {
                        return symbol(224);
                    }
                    case 116:
                        break;
                    case 48: {
                        return symbol(212);
                    }
                    case 117:
                        break;
                    case 49: {
                        return symbol(215);
                    }
                    case 118:
                        break;
                    case 50: {
                        return symbol(214);
                    }
                    case 119:
                        break;
                    case 51: {
                        return symbol(217);
                    }
                    case 120:
                        break;
                    case 52: {
                        return symbol(218);
                    }
                    case 121:
                        break;
                    case 53: {
                        string.append('\r');
                    }
                    case 122:
                        break;
                    case 54: {
                        string.append('\n');
                    }
                    case 123:
                        break;
                    case 55: {
                        string.append('\t');
                    }
                    case 124:
                        break;
                    case 56: {
                        string.append('\"');
                    }
                    case 125:
                        break;
                    case 57: {
                        return symbol(sym.CHARVAL, (int) yytext().charAt(1));
                    }
                    case 126:
                        break;
                    case 58: {
                        return symbol(sym.INT);
                    }
                    case 127:
                        break;
                    case 59: {
                        return symbol(sym.FOR);
                    }
                    case 128:
                        break;
                    case 60: {
                        System.out.println("error num");
                        return symbol(sym.ERROR, "error oct num " + s + yytext());
                    }
                    case 129:
                        break;
                    case 61: {
                        return symbol(sym.CHAR);
                    }
                    case 130:
                        break;
                    case 62: {
                        return symbol(sym.ELSE);
                    }
                    case 131:
                        break;
                    case 63: {
                        return symbol(sym.VOID);
                    }
                    case 132:
                        break;
                    case 64: {
                        return symbol(sym.CONST);
                    }
                    case 133:
                        break;
                    case 65: {
                        return symbol(sym.FLOAT);
                    }
                    case 134:
                        break;
                    case 66: {
                        return symbol(sym.BREAK);
                    }
                    case 135:
                        break;
                    case 67: {
                        return symbol(sym.WHILE);
                    }
                    case 136:
                        break;
                    case 68: {
                        return symbol(sym.RETURN);
                    }
                    case 137:
                        break;
                    case 69: {
                        return symbol(sym.CONTINUE);
                    }
                    case 138:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }


}
